name: Create and upload artifacts

on:
  release:
    types: [released]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-binaries:
    strategy:
      matrix:
        target: [
          { runner: "macos-latest", arch: "x86_64-apple-darwin" },
          { runner: "macos-latest", arch: "aarch64-apple-darwin" },
          { runner: "windows-latest", arch: "x86_64-pc-windows-msvc" },
          { runner: "ubuntu-latest", arch: "x86_64-unknown-linux-gnu" },
          { runner: "ubuntu-latest", arch: "x86_64-unknown-linux-musl" },
        ]
    runs-on: ${{ matrix.target.runner }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Install musl-tools (MUSL)
        if: ${{ matrix.target.runner == 'ubuntu-latest' && matrix.target.arch == 'x86_64-unknown-linux-musl' }}
        run: |
          sudo apt-get update
          sudo apt-get install musl-tools

      - name: Install latest rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target.arch }}
          default: true
          override: true

      - name: Build binary using cross (Linux)
        if: ${{ matrix.target.runner != 'windows-latest' && matrix.target.runner != 'macos-latest' }}
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
          sudo systemctl start docker
          cross build --release --target ${{ matrix.target.arch }}
          cp target/${{ matrix.target.arch }}/release/ontodev_valve ontodev_valve-${{ matrix.target.arch }}
          ln -s target/${{ matrix.target.arch }}/release/ontodev_valve valve

      - name: Build binary using cargo (MacOS)
        if: ${{ matrix.target.runner == 'macos-latest' }}
        run: |
          cargo build --release --target ${{ matrix.target.arch }}
          cp target/${{ matrix.target.arch }}/release/ontodev_valve ontodev_valve-${{ matrix.target.arch }}
          ln -s target/${{ matrix.target.arch }}/release/ontodev_valve valve

      - name: Build binary using cargo (Windows)
        if: ${{ matrix.target.runner == 'windows-latest' }}
        run: |
          cargo build --verbose --release --target ${{ matrix.target.arch }}
          cp target\${{ matrix.target.arch }}\release\ontodev_valve.exe ontodev_valve-${{ matrix.target.arch }}.exe
          cp target\${{ matrix.target.arch }}\release\ontodev_valve.exe valve

      - name: Upload binary to release (non-Windows)
        if: ${{ matrix.target.runner != 'windows-latest' }}
        uses: svenstaro/upload-release-action@v2
        with:
          file: ontodev_valve-${{ matrix.target.arch }}
          tag: ${{ github.ref }}
          overwrite: true

      - name: Upload binary to release (Windows)
        if: ${{ matrix.target.runner == 'windows-latest' }}
        uses: svenstaro/upload-release-action@v2
        with:
          file: ontodev_valve-${{ matrix.target.arch }}.exe
          tag: ${{ github.ref }}
          overwrite: true

  cargo-publish:
    needs: build-binaries
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Install latest rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target.arch }}
          default: true
          override: true

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          cargo publish
