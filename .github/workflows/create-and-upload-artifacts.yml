name: Create and upload artifacts

on:
  release:
    types: [released]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-binaries:
    strategy:
      matrix:
        target: [
          { runner: "macos-latest", arch: "x86_64-apple-darwin" },
          { runner: "macos-latest", arch: "aarch64-apple-darwin" },
          { runner: "windows-latest", arch: "x86_64-pc-windows-msvc" },
          { runner: "ubuntu-latest", arch: "x86_64-unknown-linux-gnu" },
          { runner: "ubuntu-latest", arch: "x86_64-unknown-linux-musl" },
        ]
    runs-on: ${{ matrix.target.runner }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Install musl-tools (MUSL)
        if: ${{ matrix.target.runner == 'ubuntu-latest' && matrix.target.arch == 'x86_64-unknown-linux-musl' }}
        run: |
          sudo apt-get update
          sudo apt-get install musl-tools

      - name: Install OpenSSL from source (MUSL)
        if: ${{ matrix.target.runner == 'ubuntu-latest' && matrix.target.arch == 'x86_64-unknown-linux-musl' }}
        # See https://qiita.com/liubin/items/6c94f0b61f746c08b74c
        run: |
          sudo -E ln -s /usr/include/x86_64-linux-gnu/asm /usr/include/x86_64-linux-musl/asm
          sudo -E ln -s /usr/include/asm-generic /usr/include/x86_64-linux-musl/asm-generic
          sudo -E ln -s /usr/include/linux /usr/include/x86_64-linux-musl/linux
          sudo -E mkdir /musl
          sudo -E wget https://github.com/openssl/openssl/archive/OpenSSL_1_1_1f.tar.gz
          sudo -E tar zxvf OpenSSL_1_1_1f.tar.gz
          cd openssl-OpenSSL_1_1_1f/
          sudo -E CC="musl-gcc -fPIE -pie" ./Configure no-shared no-async --prefix=/musl --openssldir=/musl/ssl linux-x86_64
          sudo -E make depend
          sudo -E make -j$(nproc)
          sudo -E make install

      - name: Install latest rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target.arch }}
          default: true
          override: true

      - name: Build binary (MUSL)
        if: ${{ matrix.target.runner == 'ubuntu-latest' && matrix.target.arch == 'x86_64-unknown-linux-musl' }}
        env:
          PKG_CONFIG_ALLOW_CROSS: 1
          OPENSSL_STATIC: true
          OPENSSL_DIR: /musl
        run: |
          cargo build --verbose --release --target ${{ matrix.target.arch }}
          cp target/${{ matrix.target.arch }}/release/ontodev_valve ontodev_valve-${{ matrix.target.arch }}
          ln -s target/${{ matrix.target.arch }}/release/ontodev_valve valve

      - name: Build binary (Windows)
        if: ${{ matrix.target.runner == 'windows-latest' }}
        run: |
          cargo build --verbose --release --target ${{ matrix.target.arch }}
          cp target\${{ matrix.target.arch }}\release\ontodev_valve.exe ontodev_valve-${{ matrix.target.arch }}.exe
          cp target\${{ matrix.target.arch }}\release\ontodev_valve.exe valve

      - name: Build binary (non-MUSL, non-Windows)
        if: ${{ matrix.target.runner != 'windows-latest' && matrix.target.arch != 'x86_64-unknown-linux-musl' }}
        run: |
          cargo build --verbose --release --target ${{ matrix.target.arch }}
          cp target/${{ matrix.target.arch }}/release/ontodev_valve ontodev_valve-${{ matrix.target.arch }}
          ln -s target/${{ matrix.target.arch }}/release/ontodev_valve valve

      - name: Upload binary to release (Windows)
        if: ${{ matrix.target.runner == 'windows-latest' }}
        uses: svenstaro/upload-release-action@v2
        with:
          file: ontodev_valve-${{ matrix.target.arch }}.exe
          tag: ${{ github.ref }}
          overwrite: true

      - name: Upload binary to release (non-Windows)
        if: ${{ matrix.target.runner != 'windows-latest' }}
        uses: svenstaro/upload-release-action@v2
        with:
          file: ontodev_valve-${{ matrix.target.arch }}
          tag: ${{ github.ref }}
          overwrite: true

  cargo-publish:
    needs: build-binaries
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Install latest rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target.arch }}
          default: true
          override: true

      - name: Publish to crates.io
        run: |
          cargo publish --dry-run
          # cargo publish
